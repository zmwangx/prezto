#
# Batch rename files on ACD.
#
# Authors:
#   Zhiming Wang <zmwangx@gmail.com>
#

setopt localoptions noshwordsplit noksharrays

help_text="Usage: ${0##*/} [options] perlstmts dir [dir ...]

<perlstmts> is one or more Perl statements modifying the basename of a path on
ACD, stored in $_. A counter $n (beginning from 1) is also available inside the
statements. <dir> is the path to the ACD directory whose children are to be
renamed. Multiple dirs are allowed on the command line, and the counter is
reset for each dir.

Notes:
    1. The counter $n is set to the appropriate value for each child (in
       alphabetical order), so changes to $n do not persist.
    2. Only basenames are ever touched; e.g., 's/foo/bar/g' would rename
       /foo/foo to /foo/bar, not /bar/bar.

Options:
    -h  Print this help and exit with 1.
    -t  Test run; show what would be renamed, but do not actually carry out the
        operations.
"
local opt OPTIND OPTARG
local test global_options
global_options=( ${(s/:/)ACDCLI_GLOBAL_OPTS} )
while getopts ":htv" opt; do
    case $opt in
        h)
            printf '%s\n' $help_text >&2
            return 1
            ;;
        t)
            test=1
            ;;
        \?)
            printf 'Error: Invalid option -%s.\n\n%s\n' $OPTARG $help_text >&2
            return 1
            ;;
    esac
done
shift $((OPTIND-1))

# Detect wcswidth provider
perl_text_charwidth_available=0
python_wcwidth_available=0
if perl -e 'use Text::CharWidth' 2>/dev/null; then
    perl_text_charwidth_available=1
elif python3 -c 'import wcwidth' 2>/dev/null; then
    python_wcwidth_available=1
fi

wcswidth () {
    if (( perl_text_charwidth_available )); then
        perl -e 'use Text::CharWidth qw(mbswidth); print mbswidth(@ARGV[0])' -- $1
    elif (( python_wcwidth_available )); then
        python3 -c 'import sys, wcwidth; print(wcwidth.wcswidth(sys.argv[1]))' $1
    else
        print $#1
    fi
}

local perlstmts dir counter children child new_name ret=0
perlstmts=$1 && shift
for dir; do
    [[ $dir == */ ]] || dir=$dir/
    children=( "${(@f)$(setopt pipefail;
                        command acd_cli $global_options ls $dir | \
                        sed -e 's/^[^ ]* [^ ]* //')}" ) || {
        printf "Error: Failed to list '%s'" $dir
        ret=1
        continue
    }

    # Pad all filenames to a uniform length when printing, max 79
    pad_to_len=0
    for child in $children; do
        len=$(wcswidth $child)
        (( len > pad_to_len )) && pad_to_len=$len
    done
    (( pad_to_len > 79 )) && pad_to_len=79

    counter=0
    for child in $children; do
        (( counter++ ))
        new_name="$(command perl -pe "my \$n = $counter; $perlstmts" <<< $child)" || {
            printf "Error: Perl failed on name '%s'" $child
            ret=1
            continue
        }
        [[ $child != $new_name ]] || continue
        len=$(wcswidth $child)
        (( padding_len = pad_to_len > len ? pad_to_len - len : 0 ))
        printf "%s%-${padding_len}s \e[32m=>\e[0m \e[34m%s\e[0m\n" $child '' $new_name
        (( test )) && continue
        command acd_cli $global_options rename $dir$child $new_name || {
            printf "Error: Failed to rename '%s%s' to '%s'" $dir $child $new_name
            ret=1
            continue
        }
    done
done
return $ret

# Local Variables:
# mode: sh
# End:
